import upsetplot
import polars as pl
import seaborn as sns
import matplotlib.pyplot as plt

def make_upset(df_binary: pl.DataFrame, df_values: pl.DataFrame, max_category = 25,max_subset_rank = 35) -> None:
    df_values = df_values.select(pl.col("proteinLabels"), pl.col("proteinInputValues")).unique()
    df = df_values.join(df_binary, on="proteinLabels", how="right")
    df_binary = df.to_pandas()

    # Get domain columns (all columns except proteinLabels and proteinInputValues)
    non_domain_cols = ['proteinLabels', 'proteinInputValues']
    domain_cols = [col for col in df_binary.columns if col not in non_domain_cols]

    # compute total hits per domain, pick top N
    counts = df_binary[domain_cols].sum(axis=0).sort_values(ascending=False)
    topN   = counts.head(max_category).index.tolist()

    # rebuild only those columns
    df_small = df_binary[topN + non_domain_cols]
    #pdfx     = df_small.set_index(topN)
    df_small = df_small[df_small[topN].any(axis=1)]
    pdfx = df_small.set_index(list(topN))
    # limit the number of elements in the intersection plot
    upset = upsetplot.UpSet(pdfx, subset_size="count",intersection_plot_elements=3,max_subset_rank= max_subset_rank)

    upset.add_catplot(value="proteinInputValues", kind="strip", color="blue")
    return upset

def plot_term_ridges(df_long: pl.DataFrame,
    ridge_height =  0.4,
    ridge_width = 6,
    aspect = 6,
    height = 0.8) -> sns.FacetGrid:
    # ————— prep your pandas df exactly as before —————
    pdf = (
        df_long
        .select(["termDescription","termID","proteinInputValues"])
        .filter(pl.col("proteinInputValues").is_not_null())
        .to_pandas()
    )
    term_order = (
        pdf
        .groupby("termID")["proteinInputValues"]
        .median()
        .sort_values(ascending=False)
        .index
        .tolist()
    )
    desc_map = { tid: pdf.loc[pdf.termID == tid, "termDescription"].iat[0]
                for tid in term_order }

    # how many rows?
    n = len(term_order)

    # ————— build the FacetGrid with more height per row —————
    g = sns.FacetGrid(
        pdf,
        row="termID",
        row_order=term_order,
        sharex=True,
        sharey=False,
        height=height,        # INCHES per facet
        aspect=aspect,          # width/height ratio
        margin_titles=False
    )

    # draw the filled and outline KDEs + baseline
    g.map(sns.kdeplot, "proteinInputValues", fill=True, alpha=0.8, linewidth=1.5)
    g.map(sns.kdeplot, "proteinInputValues", color="k", lw=0.5, cut=0)
    g.map(plt.axhline, y=0, lw=1, color="k")

    # kill the autogenerated titles and y‐labels
    g.set_titles("")
    g.set(yticks=[])
    g.set(ylabel="")

    # annotate each row
    for ax, tid in zip(g.axes.flat, term_order):
        ax.set_ylabel(
            tid, rotation=0, labelpad=50, va="center", fontsize=9
        )
        ax.text(
            0.5, 0.5, desc_map[tid],
            transform=ax.transAxes,
            ha="center", va="center",
            fontsize=8, color="black"
        )

    # now explicitly size the entire figure and add some vertical spacing
    total_height = ridge_height * n    # inches
    g.figure.set_size_inches(ridge_width, total_height)
    g.figure.subplots_adjust(hspace=0.4, left=0.2)

    sns.despine(bottom=True, left=True)

    axes = g.axes.flatten()
    for ax in axes[:-1]:
        ax.tick_params(labelbottom=False, bottom=False)

    # Make sure the bottom one actually has its x‐axis shown
    bottom_ax = axes[-1]
    bottom_ax.tick_params(labelbottom=True, bottom=True)
    bottom_ax.set_xlabel("proteinInputValues")
    return g
