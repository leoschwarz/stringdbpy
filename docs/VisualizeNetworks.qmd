---
title: Visualize Gene Set Enrichment Analysis Results
# current date automatically added
date: today
format:
  html:
    code-fold: false
jupyter: python3
params:
  data_file: null    # or "~"
---


```{python}
#| include: false
#| tags: [parameters]

# declare the parameter (default None)
data_file: str | None = None
```

```{python}
#| vscode: {languageId: python}
#| include: false
import polars as pl
import glob, os
import networkx as nx
import matplotlib.pyplot as plt
from pyvis.network import Network
from pathlib import Path
from string_gsea.network import separate_pivot_longer
from IPython.display import display
from IPython.display import Markdown, display
import seaborn as sns

from string_gsea.network import summarize_terms
from string_gsea.network import make_network
from string_gsea.network import make_network_with_colors, plot_network_graph
from string_gsea.network import interactive_cytoscape, plot_network_graph_plotly, add_gene_ratio
from string_gsea.cluster_genesets import make_nested_dict, convert_to_binary, plot_term_distance_heatmap

```

```{python}
#| vscode: {languageId: python}
#| include: false
wd = %pwd
print(Path(wd))
```


```{python}
#| vscode: {languageId: python}
#| include: false
# Define input directory and file

if data_file is None:
    # fallback, or raise, or skip
    file = Path(wd).parent/"tests/data/dummy_out/WU_abcd_GSEA/from_rnk"/"WUabcd_string_gsea_results_long.xlsx"
    file_links = Path(wd).parent/"tests/data/dummy_out/WU_abcd_GSEA/from_rnk"/"links.txt"
else:
    file = Path(data_file)

print("Using file:", file)

# Read Excel and convert to Polars
# Read Excel file directly with polars
df = pl.read_excel(file)
# Select and explode protein columns
# read the links.txt into a dict
with open(file_links, "r") as f:
    link_map = {
        line.split(": ", 1)[0]: line.split(": ", 1)[1].strip()
        for line in f.read().splitlines() if line.strip()
    }

```

```{python}
#| vscode: {languageId: python}
#| include: false
df = add_gene_ratio(df)
xd = separate_pivot_longer(df)
xd = summarize_terms(xd)

```



```{python}
#| vscode: {languageId: python}
#| include: false

#pdf = xd.select(['contrast','proteinRanks','proteinInputValues']).to_pandas()

g = sns.FacetGrid(xd, col='contrast', col_wrap=3, sharex=False, sharey=False)
g.map_dataframe(sns.scatterplot, x='proteinRanks', y='proteinInputValues')
g.set_axis_labels('proteinRanks', 'proteinInputValues')
for ax in g.axes.flatten():
    ax.tick_params(labelrotation=45)

plt.tight_layout()
plt.show()
```



```{python}
#| vscode: {languageId: python}
#| include: false
nested = make_nested_dict(xd)
cont = "Bait_NCP_pUbT12T14_results.tsv"
cat = "SMART"
fc = nested[cont][cat]

g = plot_term_distance_heatmap(fc)
plt.setp(g.ax_heatmap.yaxis.get_majorticklabels(), rotation=0)
plt.show()
            
```


For each of the contrasts and each of the gene set categories we show four plots:

1. Network plot
2. Heatmap plot
3. Upset plot
4. Ridgeline plot

```{python}
#| vscode: {languageId: python}
#| echo: false
# print the contrasts
contrasts = xd.get_column("contrast").unique().to_list()
contrast_str = ", ".join(str(c) for c in contrasts)
display(Markdown(f"**Contrasts:** {contrast_str}"))
```
```{python}
#| vscode: {languageId: python}
#| echo: false
# print the categories
categories = xd.get_column("category").unique().to_list()
category_str = ", ".join(str(c) for c in categories)
display(Markdown(f"**Categories:** {category_str}"))
```









```{python}
#| vscode: {languageId: python}
#| echo: false
#| output: asis
#| include: true
#| warning: false

from matplotlib import pyplot as plt
from string_gsea.gsea_plotting import make_upset, plot_term_ridges

contrast_list = xd.get_column("contrast").unique().to_list()
category_list = xd.get_column("category").unique().to_list()

for cont in contrast_list:
    # make this a tab‚Äêset
    display(Markdown(f"## Contrast: {cont}\n"))

    # show the enrichment URL for this contrast, if present
    url = link_map.get(cont.removesuffix("_results.tsv"))
    if url:
        display(Markdown(f"[üîó Global enrichment for {cont}]({url})\n"))
    
    display(Markdown(f"::: {{.panel-tabset}}\n"))
    for cat in category_list:
        # each of these becomes a tab
        display(Markdown(f"## Cat.: {cat}\n"))

        xdf = xd.filter(
            (pl.col("contrast") == cont) & (pl.col("category") == cat)
        )
        if xdf.is_empty():
            display(Markdown("_No data for this category_"))
        else:
            G = make_network_with_colors(xdf)
            fig = plot_network_graph_plotly(G, f"{cont} ‚Äì {cat}")
            fig.update_layout(width=800, height=800)
            fig.show()
            display(Markdown("""\nNetwork plot using bipartite hybrid layout.
            The proteins are the nodes, and the terms are the nodes.
            The edges are the interactions between proteins and terms.
            The color of the protein nodes represents the protein input value (log2FC, t-statistic, etc.). 
            The color of the term nodes represents the mean of the protein input values of the proteins in the term.
            The border of the term nodes represents the direction of enrichment (blue - bottom, yellow - top, green - both ends).\n
            """))
            one_nested = nested[cont][cat]
            g = plot_term_distance_heatmap(one_nested)
            plt.setp(g.ax_heatmap.yaxis.get_majorticklabels(), rotation=0)
            plt.show()
            display(Markdown("""\nHeatmap showing term and protein distances, using Jaccard index.
            Each row represents a protein, and each column represents a term.
            The color of the cell represents the protein input value (log2FC, t-statistic, etc.).\n"""))
            binary = convert_to_binary(one_nested, to_boolean=True)
            upset = make_upset(binary, xdf)
            axes = upset.plot()
            plt.show()
            display(Markdown(f"\n\n"))
            display(Markdown("""Upset plot showing the overlap of terms and proteins.
            On the left you see the term size (number of proteins matching the term).
            On the top you see the number of proteins unique to a term, or a combination of terms."""))
            display(Markdown(f"\n\n"))
            g = plot_term_ridges(xdf)
            plt.show(g.figure)
            display(Markdown("""\nRidgeline plot showing the distribution of protein input values (log2FC, t-statistic, etc.) for each term.
            The border color of the ridges corresponds to the direction of enrichment,
            and the height of the bar at the right of each ridge corresponds to the -log10(FDR) (higher is better).
            The color of the density plot is proportional to the gene ratio (number of proteins matching the term divided by the total number of proteins in the term).\n"""))
    display(Markdown(f":::\n"))
```


