---
title: VisualizeNetworks
date: '2025-04-10'
format:
  html:
    code-fold: false
jupyter: python3
params:
  data_file: null    # or "~"
---

# Load Libraries

```{python}
#| include: false
#| tags: [parameters]

# declare the parameter (default None)
data_file: str | None = None
```

```{python}
#| vscode: {languageId: python}
#| include: false
import polars as pl
import glob, os
import networkx as nx
import matplotlib.pyplot as plt
from pyvis.network import Network
from pathlib import Path
from string_gsea.network import separate_pivot_longer
from IPython.display import display
from IPython.display import Markdown, display

from string_gsea.network import summarize_terms
from string_gsea.network import make_network
from string_gsea.network import make_network_with_colors, plot_network_graph
from string_gsea.network import interactive_cytoscape, plot_network_graph_plotly
```

```{python}
#| vscode: {languageId: python}
#| include: false
wd = %pwd
print(Path(wd))
```

# Data Preparation

```{python}
#| vscode: {languageId: python}
#| include: false
# Define input directory and file

if data_file is None:
    # fallback, or raise, or skip
    file = Path(wd).parent/"tests/data/dummy_out/WU_abcd_GSEA/from_rnk"/"WUabcd_string_gsea_results_long.xlsx"
else:
    file = Path(data_file)

print("Using file:", file)

# Read Excel and convert to Polars
# Read Excel file directly with polars
df = pl.read_excel(file)
# Select and explode protein columns
df = df.with_columns(
    (pl.col("genesMapped") / pl.col("genesInSet")).alias("geneRatio")
)
df.columns
```

```{python}
#| vscode: {languageId: python}
#| include: false
xd = separate_pivot_longer(df)
xd = summarize_terms(xd)
```

```{python}
#| vscode: {languageId: python}
#| include: false
import seaborn as sns

#pdf = xd.select(['contrast','proteinRanks','proteinInputValues']).to_pandas()

g = sns.FacetGrid(xd, col='contrast', col_wrap=3, sharex=False, sharey=False)
g.map_dataframe(sns.scatterplot, x='proteinRanks', y='proteinInputValues')
g.set_axis_labels('proteinRanks', 'proteinInputValues')
for ax in g.axes.flatten():
    ax.tick_params(labelrotation=45)

plt.tight_layout()
plt.show()
```

# Results { .tab-set }

```{python}
#| vscode: {languageId: python}
#| include: false
cont = "Bait_NCP_pUbT12T14_results.tsv"
cat = "Monarch"
xdf = xd.filter((pl.col("contrast")==cont) & (pl.col("category")==cat))
        
G = make_network_with_colors(xdf)
```



```{python}
#| vscode: {languageId: python}
#| include: false
fig = plot_network_graph_plotly(G, "Demo")
fig.update_layout(width=800, height=800)
```



```{python}
#| vscode: {languageId: python}
#| include: false

contrast_list = xd.get_column("contrast").unique().to_list()
category_list = [cat for cat in xd.get_column("category").unique().to_list() if cat in ["Monarch", "KEGG"]]
category_list = xd.get_column("category").unique().to_list()
```



```{python}
#| vscode: {languageId: python}
#| echo: false
#| output: asis
#| include: false
for cont in contrast_list:
    # make this a tab‐set
    display(Markdown(f"## {cont}\n"))
    display(Markdown(f"::: {{.panel-tabset}}\n"))
    for cat in category_list:
        # each of these becomes a tab
        display(Markdown(f"## {cat}\n"))

        xdf = xd.filter(
            (pl.col("contrast") == cont) & (pl.col("category") == cat)
        )
        if xdf.is_empty():
            display(Markdown("_No data for this category_"))
        else:
            G = make_network_with_colors(xdf)
            fig = plot_network_graph_plotly(G, f"{cont} – {cat}")
            fig.update_layout(width=800, height=800)
            fig.show()
            display(Markdown(f" "))
    display(Markdown(f":::\n"))
```

