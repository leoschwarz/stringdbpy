---
title: Circular Graphs
date: '2025-04-10'
format:
  html:
    code-fold: false
jupyter: python3
params:
  data_file: null    # or "~"
---



```{python}
#| include: false
#| tags: [parameters]

# declare the parameter (default None)
data_file: str | None = None
```

```{python}
#| vscode: {languageId: python}
#| include: false
import polars as pl
import pandas as pd
import numpy as np
from math import pi, cos, sin
import plotly.graph_objects as go
from pathlib import Path

from string_gsea.network import summarize_terms, separate_pivot_longer
from string_gsea.network import make_network
from string_gsea.network import make_network_with_colors, plot_network_graph
from string_gsea.network import interactive_cytoscape, plot_network_graph_plotly, add_gene_ratio
from string_gsea.cluster_genesets import make_nested_dict, convert_to_binary, plot_term_distance_heatmap
from string_gsea.gsea_plotting import make_upset, plot_term_ridges

```

```{python}
#| vscode: {languageId: python}
#| include: false
wd = %pwd
print(Path(wd))
```


```{python}
#| vscode: {languageId: python}
#| include: false
# Define input directory and file

if data_file is None:
    # fallback, or raise, or skip
    file = Path(wd).parent/"tests/data/dummy_out/WU_abcd_GSEA/from_rnk"/"WUabcd_string_gsea_results_long.xlsx"
else:
    file = Path(data_file)

print("Using file:", file)

# Read Excel and convert to Polars
# Read Excel file directly with polars
df = pl.read_excel(file)
# Select and explode protein columns
```

# analysis for single contrast.

```{python}
#| vscode: {languageId: python}
#| include: false
df = add_gene_ratio(df)
xd = separate_pivot_longer(df)
xd = summarize_terms(xd)
```


# analysis for several contrasts.



```{python}
from string_gsea.TermNetworkBuilder import TermNetworkBuilder
from string_gsea.TermNetworkPlotter import TermNetworkPlotter
from matplotlib import pyplot as plt

nb = TermNetworkBuilder(xd, category="SMART")
within_df, cross_df, all_df = nb.build_shared_counts()
contrast_counts, contrasts = nb.build_contrast_counts()
node_sizes = nb.compute_node_sizes()

plotter = TermNetworkPlotter(
    node_sizes      = node_sizes,
    contrast_counts = contrast_counts,
    contrasts       = contrasts,
    max_radius      = 0.1
)


fig, axes = plt.subplots(3, 1, figsize=(7,10))
plotter.compute_full_layout(all_df, thresh=1)


#plotter.draw_panel(axes[0], all_df,   thresh=1, title="A) Full (T≥1)", use_fixed_layout=True)
plotter.draw_panel(axes[0], all_df,   thresh=1, title="A) Full (T≥1)", use_fixed_layout=True)
plotter.draw_panel(axes[2], cross_df, thresh=1, title="C) Cross (T≥5)", use_fixed_layout=True)
plotter.draw_panel(axes[1], within_df,thresh=1, title="D) Within (T≥1)", use_fixed_layout=True)

plt.tight_layout()
plt.show()

```

# upset 

```{python}
import polars as pl
import pandas as pd
import matplotlib.pyplot as plt
from upsetplot import from_indicators, UpSet

# 1) Grab just the term–contrast pairs (ensure uniqueness)
xd_s_smart = (
    xd
    .filter(pl.col("category") == "SMART")
    .select(["termID", "contrast"])
    .unique()
)

# 2) Convert to a pandas indicator matrix: index=termID, columns=contrast, True if present
df_pd = xd_s_smart.to_pandas()
indicator = pd.crosstab(df_pd['termID'], df_pd['contrast']).astype(bool)

# 3) Build the UpSet data structure
upset_data = from_indicators(indicator.columns.tolist(), indicator)

# 4) Plot
plt.figure(figsize=(8,5))
u = UpSet(
    upset_data,
    show_counts=True,
    sort_by='degree',        # orders intersections by size
    sort_categories_by=None,
)

u.plot()
plt.suptitle("SMART‐Term Presence Across Contrasts")
plt.show()
```



# analysis for single contrast

```{python}
# crurious to see if the code above works for single contrast
# filter for a single contrast
single_contrast = xd.filter(pl.col("contrast") == contrasts[0])

# create new network builder and plotter for single contrast
nb_single = TermNetworkBuilder(single_contrast, category="SMART") 
within_df_s, cross_df_s, all_df_s = nb_single.build_shared_counts()
contrast_counts_s, contrasts_s = nb_single.build_contrast_counts()
node_sizes_s = nb_single.compute_node_sizes()

plotter_single = TermNetworkPlotter(
    node_sizes      = node_sizes_s,
    contrast_counts = contrast_counts_s, 
    contrasts       = contrasts_s,
    max_radius      = 0.1
)

# plot single contrast network
fig, ax = plt.subplots(2, 1, figsize=(7,7))
plotter_single.compute_full_layout(all_df_s, thresh=1)
plotter_single.draw_panel(ax[0], all_df_s, thresh=1, title=f"Network for {contrasts[0]}, threshold = 1", use_fixed_layout=True)
plotter_single.draw_panel(ax[1], all_df_s, thresh=5, title=f"Network for {contrasts[0]}, threshold = 5", use_fixed_layout=True)

plt.tight_layout()
plt.show()


```


# plotting comparison of enrichment results for SMART terms

```{python}
xd_smart = xd.drop([col for col in xd.columns if col.startswith("protein")]).unique()
xd_smart = xd_smart.filter(pl.col("category") == "SMART")

from string_gsea.gsea_plotting import plot_gene_set_enrichment
plot_gene_set_enrichment(xd_smart)

```

```{python}
#| vscode: {languageId: python}
#| include: false
nested = make_nested_dict(xd)
```


```{python}
#| vscode: {languageId: python}
#| include: false



cont = "Bait_NCP_pUbT12T14_results.tsv"
cat = "Publications"
df_long = xd.filter((pl.col("contrast") == cont) & (pl.col("category") == cat))
one_nested = nested[cont][cat]
binary = convert_to_binary(one_nested, to_boolean=True)

```




```{python}
upset = make_upset(binary, df_long, max_category=25)
axes = upset.plot()

```


```{python}
from matplotlib import pyplot as plt
g = plot_term_ridges(df_long)
plt.show(g.figure)

```

```{python}


g = plot_term_ridges(df_long)
plt.show(g.figure)
```