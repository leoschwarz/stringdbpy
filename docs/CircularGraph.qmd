---
title: Comparing Contrasts
date: today
format:
  html:
    code-fold: false
jupyter: python3
params:
  data_file: null    # or "~"
---



```{python}
#| include: false
#| tags: [parameters]

# declare the parameter (default None)
data_file: str | None = None
```

```{python}
#| vscode: {languageId: python}
#| include: false
import polars as pl
import pandas as pd
import numpy as np
from math import pi, cos, sin
import plotly.graph_objects as go
from pathlib import Path

from string_gsea.network import summarize_terms, separate_pivot_longer
from string_gsea.network import make_network
from string_gsea.network import make_network_with_colors, plot_network_graph
from string_gsea.network import interactive_cytoscape, plot_network_graph_plotly, add_gene_ratio
from string_gsea.cluster_genesets import make_nested_dict, convert_to_binary, plot_term_distance_heatmap
from string_gsea.gsea_plotting import make_upset, plot_term_ridges
import warnings
warnings.filterwarnings(
    "ignore",
    message="A value is trying to be set on a copy of a DataFrame or Series through chained assignment",
    category=FutureWarning,
)
```

```{python}
#| vscode: {languageId: python}
#| include: false
wd = %pwd
print(Path(wd))
```


```{python}
#| vscode: {languageId: python}
#| include: false
# Define input directory and file

if data_file is None:
    # fallback, or raise, or skip
    file = Path(wd).parent/"tests/data/dummy_out/WU_abcd_GSEA/from_rnk"/"WUabcd_string_gsea_results_long.xlsx"
else:
    file = Path(data_file)

print("Using file:", file)

# Read Excel and convert to Polars
# Read Excel file directly with polars
df = pl.read_excel(file)
# Select and explode protein columns
```


```{python}
#| vscode: {languageId: python}
#| include: false
df = add_gene_ratio(df)
xd = separate_pivot_longer(df)
xd = summarize_terms(xd)
```

# upset 

```{python}
#| echo: false
from string_gsea.gsea_plotting import make_upset_contrasts_terms

# 1) Grab just the term–contrast pairs (ensure uniqueness)

make_upset_contrasts_terms(xd, category="SMART")
```


# plotting comparison of enrichment results for  terms

```{python}
xd_smart = xd.drop([col for col in xd.columns if col.startswith("protein")]).unique()
xd_smart = xd_smart.filter(pl.col("category") == "SMART")

from string_gsea.dotplot_endrichment import dotplot_enrichment
dotplot_enrichment(xd_smart)

```


# network for several contrasts.



```{python}
#| vscode: {languageId: python}
#| include: true
#| echo: false
from string_gsea.TermNetworkBuilder import TermNetworkBuilder
from string_gsea.TermNetworkPlotter import TermNetworkPlotter
from matplotlib import pyplot as plt

def plot_network(xd, category:str="SMART", contrast:str=None, thresh:int=3):
    if contrast is None:
        nb = TermNetworkBuilder(xd, category=category)
    else:
        nb = TermNetworkBuilder(xd.filter(pl.col("contrast") == contrast), category=category)
    
    within_df, cross_df, all_df = nb.build_shared_counts()
    contrast_counts, contrasts = nb.build_contrast_counts()
    node_sizes = nb.compute_node_sizes()

    plotter = TermNetworkPlotter(
        node_sizes      = node_sizes,
        contrast_counts = contrast_counts,
        contrasts       = contrasts,
        max_radius      = 0.1
    )


    plotter.compute_full_layout(all_df, thresh=1)


    #plotter.draw_panel(axes[0], all_df,   thresh=1, title="A) Full (T≥1)", use_fixed_layout=True)
    if contrast is None:
        fig, axes = plt.subplots(4, 1, figsize=(7,18))
        plotter.draw_panel(axes[0], all_df,   thresh=thresh, title=f"A) Full (T≥{thresh})", use_fixed_layout=True)
        plotter.draw_panel(axes[2], cross_df, thresh=thresh, title=f"C) Cross (T≥{thresh})", use_fixed_layout=True)
        plotter.draw_panel(axes[1], within_df,thresh=thresh, title=f"D) Within (T≥{thresh})", use_fixed_layout=True)
        plotter.draw_legend_panel(axes[3], title="Contrast", loc="center")
    else:
        fig, axes = plt.subplots(1, 1, figsize=(7,7))
    
        plotter.draw_panel(axes, all_df, thresh=thresh, title=f"Network for {contrasts[0]}, threshold = {thresh}", use_fixed_layout=True)
    
    plt.tight_layout()
    plt.show()



plot_network(xd, category="SMART", thresh=1)

```




# graph for single contrast


```{python}
#| echo: false
# crurious to see if the code above works for single contrast
# filter for a single contrast

plot_network(xd, category="SMART", contrast=xd.get_column("contrast").unique()[0], thresh=1)

```


