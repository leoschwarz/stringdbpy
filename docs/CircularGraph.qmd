---
title: Circular Graphs
date: '2025-04-10'
format:
  html:
    code-fold: false
jupyter: python3
params:
  data_file: null    # or "~"
---



```{python}
#| include: false
#| tags: [parameters]

# declare the parameter (default None)
data_file: str | None = None
```

```{python}
#| vscode: {languageId: python}
#| include: false
import polars as pl
import pandas as pd
import numpy as np
from math import pi, cos, sin
import plotly.graph_objects as go
from pathlib import Path

from string_gsea.network import summarize_terms, separate_pivot_longer
from string_gsea.network import make_network
from string_gsea.network import make_network_with_colors, plot_network_graph
from string_gsea.network import interactive_cytoscape, plot_network_graph_plotly, add_gene_ratio
from string_gsea.cluster_genesets import make_nested_dict, convert_to_binary, plot_term_distance_heatmap
from string_gsea.gsea_plotting import make_upset, plot_term_ridges

```

```{python}
#| vscode: {languageId: python}
#| include: false
wd = %pwd
print(Path(wd))
```


```{python}
#| vscode: {languageId: python}
#| include: false
# Define input directory and file

if data_file is None:
    # fallback, or raise, or skip
    file = Path(wd).parent/"tests/data/dummy_out/WU_abcd_GSEA/from_rnk"/"WUabcd_string_gsea_results_long.xlsx"
else:
    file = Path(data_file)

print("Using file:", file)

# Read Excel and convert to Polars
# Read Excel file directly with polars
df = pl.read_excel(file)
# Select and explode protein columns
```

```{python}
#| vscode: {languageId: python}
#| include: false
df = add_gene_ratio(df)
xd = separate_pivot_longer(df)
xd = summarize_terms(xd)


nested = make_nested_dict(xd)
```


```{python}
#| vscode: {languageId: python}
#| include: false



cont = "Bait_NCP_pUbT12T14_results.tsv"
cat = "SMART"
df_long = xd.filter((pl.col("contrast") == cont) & (pl.col("category") == cat))
one_nested = nested[cont][cat]
binary = convert_to_binary(one_nested, to_boolean=True)

```




```{python}
upset = make_upset(binary, df_long)
axes = upset.plot()

```


```{python}
from matplotlib import pyplot as plt
g = plot_term_ridges(df_long)
plt.show(g.figure)

```
