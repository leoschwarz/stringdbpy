---
title: Comparing GSEA results for multiple contrasts
date: today
format:
  html:
    code-fold: false
jupyter: python3
params:
  data_file: null    # or "~"
---



```{python}
#| include: false
#| tags: [parameters]

# declare the parameter (default None)
data_file: str | None = None
```

```{python}
#| vscode: {languageId: python}
#| include: false
import polars as pl
import pandas as pd
import numpy as np
from math import pi, cos, sin
import plotly.graph_objects as go
from pathlib import Path
from IPython.display import display
from IPython.display import Markdown, display

from string_gsea.network import summarize_terms, separate_pivot_longer
from string_gsea.network import make_network
from string_gsea.network import make_network_with_colors, plot_network_graph
from string_gsea.network import interactive_cytoscape, plot_network_graph_plotly, add_gene_ratio
from string_gsea.cluster_genesets import make_nested_dict, convert_to_binary, plot_term_distance_heatmap
from string_gsea.gsea_plotting import make_upset, plot_term_ridges

import warnings


warnings.filterwarnings(

    "ignore",
    message="A value is trying to be set on a copy of a DataFrame or Series through chained assignment",
    category=FutureWarning,
)
```

```{python}
#| vscode: {languageId: python}
#| include: false
wd = %pwd
print(Path(wd))
```


```{python}
#| vscode: {languageId: python}
#| include: false
# Define input directory and file

if data_file is None:
    # fallback, or raise, or skip
    file = Path(wd).parent/"tests/data/dummy_out/WU_abcd_GSEA/from_rnk"/"WUabcd_string_gsea_results_long.xlsx"
else:
    file = Path(data_file)

print("Using file:", file)

# Read Excel and convert to Polars
# Read Excel file directly with polars
df = pl.read_excel(file)
# Select and explode protein columns
```


```{python}
#| vscode: {languageId: python}
#| include: false
df = add_gene_ratio(df)
xd = separate_pivot_longer(df)
xd = summarize_terms(xd)

# Sort the category list alphabetically
category_list = sorted(xd.get_column("category").unique().to_list())
```


```{python}
from string_gsea.gsea_plotting import make_upset_contrasts_terms
from string_gsea.dotplot_endrichment import dotplot_enrichment
from matplotlib import pyplot as plt
from string_gsea import TermNetworkPlotter

```
#| vscode: {languageId: python}
```{python}
#| vscode: {languageId: python}
#| echo: false
#| output: asis
#| include: true
#| warning: false


display(Markdown(f"::: {{.panel-tabset}}\n"))
for cat in category_list:
    # each of these becomes a tab
    display(Markdown(f"## Cat.: {cat}\n"))

    xdf = xd.filter((pl.col("category") == cat))
    if xdf.is_empty():
        display(Markdown("_No data for this category_"))
    else:
        display(Markdown("### Upset plot"))
        make_upset_contrasts_terms(xd, category=cat)
        display(Markdown("\n"))
        display(Markdown("""Upset plot showing the overlap of terms and contrasts.
            On the left you see the contrast size (number of terms matching the contrast).
            On the top you see the number of terms unique to a contrast, or a combination of contrast."""))
        display(Markdown("\n### Dotplot"))
        
        xd_smart = xd.drop([col for col in xd.columns if col.startswith("protein")]).unique()
        xd_smart = xd_smart.filter(pl.col("category") == cat)
        dotplot_enrichment(xd_smart)
        display(Markdown("\n"))
        
        display(Markdown("""Dotplot of enriched categories for all contrasts. The size of the dot represents the gene ratio (number of proteins matching the term divided by the total number of proteins in the term), the color represents the -log10(FDR) (higher is better), the border color represents the direction of enrichment (blue - bottom, yellow - top, green - both ends)."""))
        display(Markdown("\n"))

        display(Markdown("### Network plot"))
        TermNetworkPlotter.plot_network(xd, category=cat, thresh=1)
        display(Markdown(f"""Network plot for {cat} category\n:"""))
        display(Markdown(TermNetworkPlotter.TermNetworkPlotter.get_figure_legend(one_contrast = False, category=cat, thresh=1)))
        display(Markdown("\n"))

        
display(Markdown(f":::\n"))
```


```{python}
#| vscode: {languageId: python}
#| include: false



```